--- component-decl.h.orig	2013-05-28 20:54:13.230146744 -0400
+++ component-decl.h	2013-04-11 22:36:24.000000000 -0400
@@ -33,42 +33,24 @@
 {
 public:
 
-  /**
+  /** ComponentLpMapping Constructor
    *  @arg \c c Component ptr
-   *  @arg \c l Logic process of the component
+   *  @arg \c l LpId
    */
   ComponentLpMapping(Component* c, LpId_t l)
     : component(c), lp(l) {}
-
+public:
   /** Pointer to the component being mapped, 
    *  nil if it is on a remote Lp
    */
   Component* component;
   
-  //! Lp id for the component this mapping refers to
+  /** Lp id for the component this mapping refers to
+   */
   LpId_t     lp;
 };
 
 
-//! @class BorderPort component-decl.h
-//! @brief Object of this class is associated with a border port and is used to
-//! predict time-stamp of future output events.
-class BorderPort {
-public:
-    BorderPort(int srcp, int srclp, int dstlp, Clock* clk) :
-        m_SRCPORT(srcp), m_SRCLP(srclp), m_DSTLP(dstlp), m_clk(clk) {}
-
-    //! Inform scheduler tick of next output.
-    void update_output_tick(Ticks_t);
-    Clock* get_clk() { return m_clk; }
-private:
-    const int m_SRCPORT;
-    const int m_SRCLP;
-    const int m_DSTLP;
-    Clock* m_clk;
-};
-
-
 /** \class LinkTypeMismatchException component-decl.h
  *
  * A LinkTypeMismatchException is thrown when trying to set up a link
@@ -86,21 +68,30 @@
 {
 public:
   
+  /** Empty base constructor
+   */
   Component();
+  
+  /** Virtual destructor
+   */
   virtual ~Component();
   
-  //! Sets the id of the component
-  //!  @arg \c newId The id of the component 
+  /** Sets the id of the component
+   *  @arg \c newId The id of the component 
+   */
   void SetComponentId(CompId_t newId);
   
-  //! Set the name of the component
-  //! @arg \c name The unique name of the component
+  /** Set the name of the component
+   * @arg \c name The unique name of the component
+   */
   void SetComponentName(CompName_t newName);
 
-  //! Returns the component id
+  /** Returns the component id
+   */
   int GetComponentId() const;    
 
-  //! Returns the component name
+  /** Returns the component name
+   */
   CompName_t GetComponentName() const; 
   
   /** Creates a complex link that sends arbitrary type T
@@ -108,14 +99,12 @@
    */
   template <typename T> Link<T>* AddOutputLink(int outIndex) throw (LinkTypeMismatchException);
   
+  /** Adds an input for the component to keep track of.
+   *  @arg Ptr to the input Link 
+   */
+  //void AddInputLink(LinkBase*);
 
   /** Add an input for the component.
-   * @arg \c inputIndex The index(port) number of the input.
-   * @arg \c handler Event handler for the input. It takes 2 parameters, and integer and T2 the type of the input data. 
-   * @arg \c obj Event handling object, almost always the component itself.
-   * @arg \c c Associated clock, if any.
-   * @arg \c isTimed A boolean indicating if the link delay is specified in Time_t or Ticks_t.
-   * @arg \c isHalf A boolean indicating if the link delay unit is half-tick.
    */
   template<typename T, typename T2>
   void AddInput(int inputIndex, void (T::*handler)(int, T2), T* obj, Clock* c, bool isTimed, bool isHalf);
@@ -130,7 +119,7 @@
   template <typename T>
     void SendTick(int, T, Ticks_t);
 
-  template <typename T>
+   template <typename T>
     void SendTime(int, T, Time_t);
     
   /** This is called by the scheduler to handler an incoming message.
@@ -143,9 +132,6 @@
                    Time_t sendTime, Time_t recvTime, unsigned char* data, int len);
 
 
-  void add_border_port(int srcPort, int dstLP, Clock* clk);
-
-
   // Static functions
   
   /** Return true if component is local to this LP
@@ -175,8 +161,6 @@
    * @arg Component name (optional)
    */    
   template <typename T, typename T1> 
-    static CompId_t Create(LpId_t, T1&, CompName_t name = "None");
-  template <typename T, typename T1> 
     static CompId_t Create(LpId_t, const T1&, CompName_t name = "None");
 
   /** Variation on Create, 2 arugments for the constructor.
@@ -189,8 +173,6 @@
    */        
   template <typename T, typename T1, typename T2> 
     static CompId_t Create(LpId_t, const T1&, const T2&, CompName_t name = "None");
-  template <typename T, typename T1, typename T2> 
-    static CompId_t Create(LpId_t, T1&, T2&, CompName_t name = "None");
 
   /** Variation on Create, 3 arugments for the constructor.
    *  The first argument is always type LpId_t, and indicates which LP
@@ -217,6 +199,20 @@
   template <typename T, typename T1, typename T2, typename T3, typename T4> 
     static CompId_t Create(LpId_t, const T1&, const T2&, const T3&, const T4&, CompName_t name = "None");
 
+  /** Variation on Create, 5 arugments for the constructor.
+   *  The first argument is always type LpId_t, and indicates which LP
+   *  is desired; subsequent parameters are passed to the constructor.
+   * @arg Lp id
+   * @arg Any type argument
+   * @arg Any type argument
+   * @arg Any type argument
+   * @arg Any type argument   
+   * @arg Any type argument   
+   * @arg Component name (optional)
+   */        
+  template <typename T, typename T1, typename T2, typename T3, typename T4, typename T5> 
+    static CompId_t Create(LpId_t, const T1&, const T2&, const T3&, const T4&, const T5&, CompName_t name = "None");
+
   /** Static function to get the original component pointer by component id
    *  @arg CompId_t
    */ 
@@ -251,7 +247,6 @@
    */
   static LpId_t GetComponentLP(CompName_t);
 
-
 protected:
   
   /** Vector of input link ptrs for this component
@@ -260,16 +255,11 @@
 
 #ifndef NO_MPI
   std::vector<LinkInputBase*> inLinks;
-
-  std::vector<BorderPort*> border_ports;
-
-  virtual void remote_input_notify(Ticks_t when, void* ) {}
 #endif //#ifndef NO_MPI
   
-  //! Vector of output link ptrs for this component
+  /** Vector of output link ptrs for this component
+   */
   std::vector<LinkBase*> outLinks;
-
-
 private:
   
   /** Component id for this component.
