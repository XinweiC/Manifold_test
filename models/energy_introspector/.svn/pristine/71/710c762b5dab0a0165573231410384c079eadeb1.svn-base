/*
   The Energy Introspector (EI) is the simulation interface and does not possess 
   the copyrights of the following tools: 
      IntSim: Microelectronics Research Center, Georgia Tech
      DSENT: Computer Science and Artificial Intelligence Lab, MIT
      McPAT: Hewlett-Packard Labs
      3D-ICE: Embedded Systems Lab, EPFL
      HotSpot: Laboratory for Computer Architecture at Virginia, Univ. of Virginia
  
   The EI does not guarantee the exact same functionality, performance, or result
   of the above tools distributed by the original developers.
  
   The Use, modification, and distribution of the EI is subject to the policy of
   the Semiconductor Research Corporation (Task 2084.001).
  
   Copyright 2012
   William Song and Sudhakar Yalamanchili
   Georgia Institute of Technology, Atlanta, GA 30332
*/

#ifndef EI_H
#define EI_H

#include <string>
#include <map>

#include "definitions.h"
#include "parameters.h"
#include "parser.h"
#include "library.h"
#include "queue.h"

namespace EI {

  class pseudo_component_t
  {
  public:
    pseudo_component_t() {}
    ~pseudo_component_t() {}
    
    string name;
    int ID;
    
    queue_t queue;
  };
  
  class pseudo_module_t;
  class pseudo_partition_t;
  class pseudo_package_t;
  
  class pseudo_module_t : public pseudo_component_t
  {
  public:
    pseudo_module_t() : energy_library(NULL) {}
    ~pseudo_module_t() { queue.reset(); }
    
    energy_library_t *energy_library; // pointer to energy library
    string partition; // partition name
  };
  
  
  class pseudo_partition_t : public pseudo_component_t
  {
  public:
    pseudo_partition_t() : reliability_library(NULL) {}
    ~pseudo_partition_t() { module.clear(); queue.reset(); }
    
    reliability_library_t *reliability_library; // pointer to reliability library
    vector<string> module; // modules mapped to this partition
    string package; // package name
  };
  
  /*
   class pseudo_die_stack_t : public pseudo_component_t
   {
   public:
   pseudo_die_stack_t() {}
   ~pseudo_die_stack_t() { partition.clear(); queue.reset(); }
   
   vector<string> partition;
   string package;
   };
   */
  
  class pseudo_package_t : public pseudo_component_t
  {
  public:
    pseudo_package_t() : thermal_library(NULL) {}
    ~pseudo_package_t() { partition.clear(); queue.reset(); }
    
    thermal_library_t *thermal_library; // pointer to thermal library
    vector<string> partition; // partitions in the package
  };
  
  
  class pseudo_sensor_t : public pseudo_component_t
  {
  public:
    pseudo_sensor_t() : sensor_library(NULL) {}
    ~pseudo_sensor_t() { }
    
    sensor_library_t *sensor_library; // pointer to sensor library
    int index; // sensor index if multiple sensors are bound to the same data
    string component_type, component_name, component_data; // sensed component and data information
  };
  
  
  class energy_introspector_t
  {
  private:
    // operators
    friend counters_t operator+(const counters_t & x, const counters_t & y);
    friend counters_t operator-(const counters_t & x, const counters_t & y);
    friend energy_t operator+(const energy_t & x, const energy_t & y);
    friend energy_t operator-(const energy_t & x, const energy_t & y);
    friend power_t operator+(const power_t & x, const power_t & y);
    friend power_t operator-(const power_t & x, const power_t & y);
    friend power_t operator*(const energy_t & x, const double y);
    friend energy_t operator/(const power_t & x, const double y);
    
    // internal configuration functions
    void pre_config(parameters_t *parameters);
    void post_config(parameters_t *parameters);
    
  public:
    energy_introspector_t(void);
    energy_introspector_t(char *input_config);
    energy_introspector_t(char *input_config, char *output_config);
    ~energy_introspector_t();
    
    // map of the pseudo entities
    map<string,pseudo_package_t> package;
    map<string,pseudo_partition_t> partition;
    map<string,pseudo_module_t> module;
    map<string,pseudo_sensor_t> sensor;

    int num_components;
    
    FILE *file_config; // config result
    
    // initialization function
    void configure(char *input_config, char* output_config);
    
    // computational functions -- data-dependent
    void compute_power(double time_tick, double period, string module_name, counters_t counters, bool is_tdp = false);
    void compute_temperature(double time_tick, double period, string package_name);
    void compute_reliability(double time_tick, double period, string partition_name,\
                             double clock_frequency, double voltage, bool power_gating);
    
    // update_energy() re-computes the per-access energy of the pseudo module
    template <typename T>
    void update_variable(string name, string updater, T value)
    {
      map<string,pseudo_module_t>::iterator module_it = module.find(name);
      if(module_it != module.end())
      {
        if(module_it->second.energy_library)
          module_it->second.energy_library->update_variable(updater,&value);
        else
          EI_WARNING("EI","pseudo module "+name+" does not have a link to the energy library");
      }
      else
        EI_WARNING("EI","cannot find pseudo module "+name+" in update_energy()");
    }
    
    // push_data() stores the data in the runtime queue of a psuedo component
    template <typename T>
    void push_data(double time_tick, double period, string type, string name, string data, T value)
    {
      if(type == "package")
      {
        map<string,pseudo_package_t>::iterator package_it = package.find(name);
        if(package_it != package.end())
        {
          package_it->second.queue.push<T>(time_tick,period,data,value,false);
          
          int sensor_index = 0;
          pseudo_sensor_t *pseudo_sensor = package_it->second.queue.get_sensor(data,sensor_index);
          while(pseudo_sensor)
          {
            // EI cannot access the sensor queue without knowing the proper data type.
            // sensor_library is responsible for storing the data in the sensor queue.
            if(pseudo_sensor->sensor_library)
              pseudo_sensor->sensor_library->read_data(time_tick,&value);
            
            pseudo_sensor = package_it->second.queue.get_sensor(data,++sensor_index);
          }
        }
        else
          EI_WARNING("EI","cannot find pseudo package "+name+" in push_data()");
      }
      else if(type == "partition")
      {
        map<string,pseudo_partition_t>::iterator partition_it = partition.find(name);
        if(partition_it != partition.end())
        {
          partition_it->second.queue.push<T>(time_tick,period,data,value,false);
          
          int sensor_index = 0;
          pseudo_sensor_t *pseudo_sensor = partition_it->second.queue.get_sensor(data,sensor_index);
          while(pseudo_sensor)
          {
            // EI cannot access the sensor queue without knowing the proper data type.
            // sensor_library is responsible for storing the data in the sensor queue.
            if(pseudo_sensor->sensor_library)
              pseudo_sensor->sensor_library->read_data(time_tick,&value);
            
            pseudo_sensor = partition_it->second.queue.get_sensor(data,++sensor_index);
          }
        }
        else
          EI_WARNING("EI","cannot find pseudo partition "+name+" in push_data()");
      }
      else if(type == "module")
      {
        map<string,pseudo_module_t>::iterator module_it = module.find(name);
        if(module_it != module.end())
        {
          module_it->second.queue.push<T>(time_tick,period,data,value,false);
          
          int sensor_index = 0;
          pseudo_sensor_t *pseudo_sensor = module_it->second.queue.get_sensor(data,sensor_index);
          while(pseudo_sensor)
          {
            // EI cannot access the sensor queue without knowing the proper data type.
            // sensor_library is responsible for storing the data in the sensor queue.
            if(pseudo_sensor->sensor_library)
              pseudo_sensor->sensor_library->read_data(time_tick,&value);
            
            pseudo_sensor = module_it->second.queue.get_sensor(data,++sensor_index);
          }
        }
        else
          EI_WARNING("EI","cannot find pseudo module "+name+" in push_data()");
      }
      else if(type == "sensor")
      {
        map<string,pseudo_sensor_t>::iterator sensor_it = sensor.find(name);
        if(sensor_it != sensor.end())
          sensor_it->second.queue.push<T>(time_tick,period,data,value,false);
        else
          EI_WARNING("EI","cannot find pseudo sensor "+name+" in push_data()");
      }
      else
        EI_WARNING("EI","unknown pseudo component "+type+" in push_data()");
    }
    
    
    // push_data() loads the data from the runtime queue of a psuedo component
    template <typename T>
    T pull_data(double time_tick, string type, string name, string data)
    {
      T value;
      if(type == "package")
      {
        map<string,pseudo_package_t>::iterator package_it = package.find(name);
        if(package_it != package.end())
          value = package_it->second.queue.pull<T>(time_tick,data,false);
        else
          EI_WARNING("EI","cannot find pseudo package "+name+" in pull_data()");
      }
      else if(type == "partition")
      {
        map<string,pseudo_partition_t>::iterator partition_it = partition.find(name);
        if(partition_it != partition.end())
          value = partition_it->second.queue.pull<T>(time_tick,data,false);
        else
          EI_WARNING("EI","cannot find pseudo partition "+name+" in pull_data()");
      }
      else if(type == "module")
      {
        map<string,pseudo_module_t>::iterator module_it = module.find(name);
        if(module_it != module.end())
          value = module_it->second.queue.pull<T>(time_tick,data,false);
        else
          EI_WARNING("EI","cannot find pseudo module "+name+" in pull_data()");
      }
      else if(type == "sensor")
      {
        map<string,pseudo_sensor_t>::iterator sensor_it = sensor.find(name);
        if(sensor_it != sensor.end())
          value = sensor_it->second.queue.pull<T>(time_tick,data,false);
        else
          EI_WARNING("EI","cannot find pseudo sensor "+name+" in pull_data()");
      }
      else
        EI_WARNING("EI","unknown pseudo component type "+type+" in pull_data()");
      
      return value;
    }
  };
  
} // namespace EI

#endif

